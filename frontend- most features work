import 'dart:async';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:url_launcher/url_launcher.dart';

// ===== Added models (ActivityCard, GroupMember, TripActivity, TripDay) =====
class ActivityCard {
  final String title;
  final String description;
  final String location;
  final String image; // asset path
  final String transport;
  final String duration;

  const ActivityCard({
    required this.title,
    required this.description,
    required this.location,
    required this.image,
    required this.transport,
    required this.duration,
  });
}

class GroupMember {
  final String name;
  final String? avatar; // optional
  final bool isOwner;

  const GroupMember({required this.name, this.avatar, this.isOwner = false});
}

class TripActivity {
  final String title;
  final String time;
  final String duration;
  final String transport;
  final String price;
  final IconData icon;
  final String? description;
  final String? location;

  const TripActivity({
    required this.title,
    required this.time,
    required this.duration,
    required this.transport,
    required this.price,
    required this.icon,
    this.description,
    this.location,
  });
}

class TripDay {
  final int dayNumber;
  final List<TripActivity> activities;

  const TripDay({required this.dayNumber, required this.activities});
}
// ===== end models =====

// ===== Added helper to render trip days if method was missing =====
Widget buildTripDaysSection() {
  // Example static content; replace with your state if needed
  final sampleDays = const [
    TripDay(
      dayNumber: 1,
      activities: [
        TripActivity(
          title: 'Explore Petra',
          time: '9:00 AM – 12:00 PM',
          duration: '3h',
          transport: 'Car',
          price: '50 JOD',
          icon: Icons.museum_outlined,
          description: 'Walk through the Siq to the Treasury',
          location: 'Petra',
        ),
      ],
    ),
  ];
  return Padding(
    padding: EdgeInsets.symmetric(horizontal: 20),
    child: Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          'Your Trip',
          style: TextStyle(fontSize: 20, fontWeight: FontWeight.w700),
        ),
        SizedBox(height: 12),
        ...sampleDays.map(
          (d) => Card(
            margin: EdgeInsets.only(bottom: 12),
            child: Padding(
              padding: EdgeInsets.all(12),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    'Day ${d.dayNumber}',
                    style: TextStyle(fontSize: 16, fontWeight: FontWeight.w700),
                  ),
                  ...d.activities.map(
                    (a) => ListTile(
                      dense: true,
                      contentPadding: EdgeInsets.zero,
                      leading: Icon(a.icon),
                      title: Text(a.title),
                      subtitle: Text(
                        '${a.time} • ${a.duration} • ${a.transport} • ${a.price}',
                      ),
                    ),
                  ),
                ],
              ),
            ),
          ),
        ),
      ],
    ),
  );
}
// ===== end helper =====

void main() => runApp(const TourioApp());

class TourioApp extends StatelessWidget {
  const TourioApp({super.key});

  @override
  Widget build(BuildContext context) {
    const accent = Color(0xFFC03A2B);
    return MaterialApp(
      title: 'Tourio',
      debugShowCheckedModeBanner: false,
      theme: ThemeData(
        useMaterial3: true,
        colorScheme: ColorScheme.fromSeed(seedColor: accent),
        inputDecorationTheme: InputDecorationTheme(
          border: const OutlineInputBorder(
            borderRadius: BorderRadius.all(Radius.circular(12)),
          ),
          filled: true,
          fillColor: Colors.white.withOpacity(0.78),
          contentPadding: const EdgeInsets.symmetric(
            horizontal: 14,
            vertical: 12,
          ),
          labelStyle: const TextStyle(color: Colors.black87),
        ),
      ),
      routes: {
        '/intro': (_) => const IntroPage(),
        '/login': (_) => const LoginPage(),
        '/signup': (_) => const SignUpPage(),
        '/home': (_) => const HomePage(),
        '/my-profile': (_) => const MyProfilePage(),
        '/edit-profile': (_) => const EditProfilePage(),
        '/emergency': (_) => const EmergencyPage(),
        '/trip-preferences': (_) => const TripPreferencesPage(),
        '/trip-duration': (_) => const TripDurationPage(),
        '/accommodation': (_) => const AccommodationPage(),
        '/travel-mode': (_) => const TravelModePage(),
        '/activities-per-day': (_) => const ActivitiesPerDayPage(),
        '/budget': (_) => const BudgetPage(),
        '/activity-recommendations': (_) => const ActivityRecommendationsPage(),
        '/your-trip': (_) => const YourTripPage(),
        '/friendventure': (_) => const FriendventureHomePage(),
        '/friendventure/groups': (_) => const GroupsPage(),
        '/friendventure/polls': (_) => const PollsPage(),
        '/friendventure/albums': (_) => const AlbumsPage(),
      },
      initialRoute: '/intro',
    );
  }
}

// SlideshowBackground Widget
class SlideshowBackground extends StatefulWidget {
  const SlideshowBackground({super.key, required this.child});
  final Widget child;

  @override
  State<SlideshowBackground> createState() => _SlideshowBackgroundState();
}

class _SlideshowBackgroundState extends State<SlideshowBackground> {
  final List<String> _bgImages = const [
    'assets/images/deadsea.jpg',
    'assets/images/downtown_pic.jpg',
    'assets/images/nature_pic.jpg',
    'assets/images/petra_image.jpg',
    'assets/images/petra_lights.jpg',
    'assets/images/sad_il_malek_talal.jpg',
    'assets/images/stairtojabalamman.jpg',
    'assets/images/wadi_rum.jpg',
    'assets/images/webdeh_pic.jpg',
  ];

  final _pageCtrl = PageController();
  Timer? _timer;
  int _index = 0;

  @override
  void initState() {
    super.initState();
    _timer = Timer.periodic(const Duration(milliseconds: 1500), (_) {
      if (!mounted) return;
      _index = (_index + 1) % _bgImages.length;
      _pageCtrl.animateToPage(
        _index,
        duration: const Duration(milliseconds: 550),
        curve: Curves.easeInOut,
      );
      setState(() {});
    });
  }

  @override
  void dispose() {
    _timer?.cancel();
    _pageCtrl.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Stack(
      children: [
        PageView.builder(
          controller: _pageCtrl,
          physics: const NeverScrollableScrollPhysics(),
          itemCount: _bgImages.length,
          itemBuilder: (_, i) => Container(
            decoration: BoxDecoration(
              image: DecorationImage(
                image: AssetImage(_bgImages[i]),
                fit: BoxFit.cover,
              ),
            ),
          ),
        ),
        Container(
          decoration: const BoxDecoration(
            gradient: LinearGradient(
              begin: Alignment.topCenter,
              end: Alignment.bottomCenter,
              colors: [Colors.black87, Colors.black54, Colors.black45],
            ),
          ),
        ),
        Positioned.fill(child: widget.child),
      ],
    );
  }
}

// TourioLogo Widget
class TourioLogo extends StatelessWidget {
  const TourioLogo({super.key, this.width = 260, this.dy = 0});
  final double width;
  final double dy;

  @override
  Widget build(BuildContext context) {
    return Center(
      child: Transform.translate(
        offset: Offset(0, dy),
        child: Image.asset(
          'assets/images/star.jpg',
          width: width,
          fit: BoxFit.contain,
        ),
      ),
    );
  }
}

// FrostButton Widget
class FrostButton extends StatelessWidget {
  const FrostButton({super.key, required this.onPressed, required this.label});
  final VoidCallback onPressed;
  final String label;

  @override
  Widget build(BuildContext context) {
    const accent = Color(0xFFC03A2B);
    return SizedBox(
      height: 46,
      width: double.infinity,
      child: ElevatedButton(
        onPressed: onPressed,
        style: ElevatedButton.styleFrom(
          backgroundColor: Colors.white.withOpacity(0.78),
          foregroundColor: accent,
          elevation: 0,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(12),
          ),
        ),
        child: Text(
          label,
          style: const TextStyle(
            fontWeight: FontWeight.w800,
            letterSpacing: 0.5,
          ),
        ),
      ),
    );
  }
}

// ObscuredTextField Widget
class ObscuredTextField extends StatefulWidget {
  const ObscuredTextField({
    super.key,
    required this.controller,
    required this.label,
    this.textColor,
    this.fill,
    this.validator,
  });

  final TextEditingController controller;
  final String label;
  final Color? textColor;
  final Color? fill;
  final String? Function(String?)? validator;

  @override
  State<ObscuredTextField> createState() => _ObscuredTextFieldState();
}

class _ObscuredTextFieldState extends State<ObscuredTextField> {
  bool _obscure = true;

  @override
  Widget build(BuildContext context) {
    return TextFormField(
      controller: widget.controller,
      obscureText: _obscure,
      validator: widget.validator,
      style: TextStyle(color: widget.textColor),
      decoration: InputDecoration(
        labelText: widget.label,
        labelStyle: widget.textColor != null
            ? TextStyle(color: widget.textColor!.withOpacity(0.8))
            : null,
        fillColor: widget.fill,
        suffixIcon: IconButton(
          onPressed: () => setState(() => _obscure = !_obscure),
          icon: Icon(_obscure ? Icons.visibility_off : Icons.visibility),
          color: widget.textColor ?? Colors.black87,
        ),
      ),
    );
  }
}

// SwipeCard Widget
class SwipeCard extends StatelessWidget {
  final String title;
  final String description;
  final String location;
  final String image;
  final String transport;
  final String duration;

  const SwipeCard({
    super.key,
    required this.title,
    required this.description,
    required this.location,
    required this.image,
    required this.transport,
    required this.duration,
  });

  @override
  Widget build(BuildContext context) {
    return Container(
      width: double.infinity,
      height: 500,
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(24),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.1),
            blurRadius: 20,
            offset: const Offset(0, 10),
          ),
        ],
      ),
      child: ClipRRect(
        borderRadius: BorderRadius.circular(24),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Expanded(
              flex: 3,
              child: Stack(
                children: [
                  Image.asset(
                    image,
                    width: double.infinity,
                    height: double.infinity,
                    fit: BoxFit.cover,
                  ),
                  Container(
                    decoration: BoxDecoration(
                      gradient: LinearGradient(
                        begin: Alignment.topCenter,
                        end: Alignment.bottomCenter,
                        colors: [
                          Colors.transparent,
                          Colors.black.withOpacity(0.7),
                        ],
                      ),
                    ),
                  ),
                  Positioned(
                    left: 20,
                    top: 20,
                    right: 20,
                    child: Text(
                      title,
                      style: const TextStyle(
                        color: Colors.white,
                        fontSize: 24,
                        fontWeight: FontWeight.w700,
                      ),
                      maxLines: 2,
                      overflow: TextOverflow.ellipsis,
                    ),
                  ),
                ],
              ),
            ),
            Expanded(
              flex: 2,
              child: Container(
                padding: const EdgeInsets.all(20),
                color: Colors.white,
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      description,
                      style: const TextStyle(
                        fontSize: 16,
                        fontWeight: FontWeight.w600,
                        color: Color(0xFF5C1E16),
                      ),
                    ),
                    const SizedBox(height: 10),
                    Row(
                      children: [
                        const Icon(
                          Icons.location_on,
                          size: 16,
                          color: Color(0xFFC03A2B),
                        ),
                        const SizedBox(width: 4),
                        Expanded(
                          child: Text(
                            location,
                            style: const TextStyle(
                              fontSize: 14,
                              color: Color(0xFF8B4513),
                            ),
                          ),
                        ),
                        Container(
                          padding: const EdgeInsets.symmetric(
                            horizontal: 8,
                            vertical: 4,
                          ),
                          decoration: BoxDecoration(
                            color: const Color(0xFFC03A2B).withOpacity(0.1),
                            borderRadius: BorderRadius.circular(12),
                          ),
                          child: Text(
                            duration,
                            style: const TextStyle(
                              fontSize: 12,
                              fontWeight: FontWeight.w600,
                              color: Color(0xFFC03A2B),
                            ),
                          ),
                        ),
                      ],
                    ),
                    const SizedBox(height: 15),
                    Row(
                      children: [
                        Expanded(
                          child: _TransportOption(
                            icon: Icons.directions_bus,
                            label: transport.contains('Bus') ? 'Bus' : 'Car',
                            isSelected: transport.contains('Bus'),
                          ),
                        ),
                        const SizedBox(width: 10),
                        Expanded(
                          child: _TransportOption(
                            icon: Icons.directions_car,
                            label: 'Car',
                            isSelected: transport.toLowerCase().contains('car'),
                          ),
                        ),
                      ],
                    ),
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}

class _TransportOption extends StatelessWidget {
  final IconData icon;
  final String label;
  final bool isSelected;

  const _TransportOption({
    required this.icon,
    required this.label,
    required this.isSelected,
  });

  @override
  Widget build(BuildContext context) {
    return Container(
      padding: const EdgeInsets.symmetric(vertical: 8, horizontal: 12),
      decoration: BoxDecoration(
        color: isSelected
            ? const Color(0xFFC03A2B).withOpacity(0.1)
            : Colors.grey.withOpacity(0.1),
        borderRadius: BorderRadius.circular(20),
        border: Border.all(
          color: isSelected
              ? const Color(0xFFC03A2B)
              : Colors.grey.withOpacity(0.3),
        ),
      ),
      child: Row(
        mainAxisSize: MainAxisSize.min,
        children: [
          Icon(
            icon,
            size: 16,
            color: isSelected ? const Color(0xFFC03A2B) : Colors.grey,
          ),
          const SizedBox(width: 6),
          Text(
            label,
            style: TextStyle(
              fontSize: 12,
              fontWeight: FontWeight.w600,
              color: isSelected ? const Color(0xFFC03A2B) : Colors.grey,
            ),
          ),
        ],
      ),
    );
  }
}

// Intro Page
class IntroPage extends StatefulWidget {
  const IntroPage({super.key});

  @override
  State<IntroPage> createState() => _IntroPageState();
}

class _IntroPageState extends State<IntroPage> {
  @override
  void initState() {
    super.initState();
    Future.delayed(const Duration(milliseconds: 1800), () {
      if (mounted) Navigator.pushReplacementNamed(context, '/login');
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Tourio'),
        backgroundColor: Colors.transparent,
        elevation: 0,
      ),
      body: SlideshowBackground(
        child: SafeArea(
          child: Column(
            children: const [SizedBox(height: 16), TourioLogo(width: 280)],
          ),
        ),
      ),
    );
  }
}

// Login Page
class LoginPage extends StatefulWidget {
  const LoginPage({super.key});

  @override
  State<LoginPage> createState() => _LoginPageState();
}

class _LoginPageState extends State<LoginPage> {
  final _emailCtrl = TextEditingController();
  final _pwCtrl = TextEditingController();

  @override
  void dispose() {
    _emailCtrl.dispose();
    _pwCtrl.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    const fieldWidth = 320.0;
    return Scaffold(
      appBar: AppBar(
        title: const Text('Tourio'),
        backgroundColor: Colors.transparent,
        elevation: 0,
        leading: IconButton(
          icon: const Icon(Icons.arrow_back, color: Colors.white),
          onPressed: () => Navigator.pushReplacementNamed(context, '/intro'),
        ),
      ),
      body: SlideshowBackground(
        child: SafeArea(
          child: Center(
            child: SingleChildScrollView(
              padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 16),
              child: Column(
                mainAxisSize: MainAxisSize.min,
                children: [
                  const SizedBox(height: 16),
                  const TourioLogo(width: 260),
                  const SizedBox(height: 150),
                  ConstrainedBox(
                    constraints: const BoxConstraints(maxWidth: fieldWidth),
                    child: Column(
                      children: [
                        TextField(
                          controller: _emailCtrl,
                          keyboardType: TextInputType.emailAddress,
                          decoration: const InputDecoration(
                            labelText: 'Username/Email',
                          ),
                        ),
                        const SizedBox(height: 12),
                        ObscuredTextField(
                          controller: _pwCtrl,
                          label: 'Password',
                        ),
                        const SizedBox(height: 18),
                        FrostButton(
                          onPressed: () =>
                              Navigator.pushReplacementNamed(context, '/home'),
                          label: 'LOG IN',
                        ),
                        const SizedBox(height: 12),
                        FrostButton(
                          onPressed: () =>
                              Navigator.pushNamed(context, '/signup'),
                          label: 'SIGN UP',
                        ),
                      ],
                    ),
                  ),
                ],
              ),
            ),
          ),
        ),
      ),
    );
  }
}

// Sign Up Page
class SignUpPage extends StatefulWidget {
  const SignUpPage({super.key});

  @override
  State<SignUpPage> createState() => _SignUpPageState();
}

class _SignUpPageState extends State<SignUpPage> {
  final _formKey = GlobalKey<FormState>();
  final _usernameCtrl = TextEditingController();
  final _emailCtrl = TextEditingController();
  final _pwCtrl = TextEditingController();

  final _dayCtrl = TextEditingController();
  final _monthCtrl = TextEditingController();
  final _yearCtrl = TextEditingController();
  final _dayNode = FocusNode();
  final _monthNode = FocusNode();
  final _yearNode = FocusNode();

  String? _dobError;

  @override
  void dispose() {
    _usernameCtrl.dispose();
    _emailCtrl.dispose();
    _pwCtrl.dispose();
    _dayCtrl.dispose();
    _monthCtrl.dispose();
    _yearCtrl.dispose();
    _dayNode.dispose();
    _monthNode.dispose();
    _yearNode.dispose();
    super.dispose();
  }

  String? _validateEmail(String? v) {
    if (v == null || v.trim().isEmpty) return 'Email is required';
    final re = RegExp(r'^[\w\.\-]+@([\w\-]+\.)+[a-zA-Z]{2,}$');
    if (!re.hasMatch(v.trim())) return 'Enter a valid email';
    return null;
  }

  String? _validateUsername(String? v) {
    if (v == null || v.trim().isEmpty) return 'Username is required';
    if (v.trim().length < 3) return 'Username must be at least 3 characters';
    return null;
  }

  String? _validatePassword(String? v) {
    if (v == null || v.isEmpty) return 'Password is required';
    final hasMin = v.length >= 8;
    final hasSymbol = RegExp(
      r'[!@#\$%^&*()_\+\-\=\[\]{};:"\\|,.<>\/?~`]',
    ).hasMatch(v);
    if (!hasMin) return 'Password must be at least 8 characters';
    if (!hasSymbol) return 'Password must contain at least one symbol';
    return null;
  }

  bool _isValidDate(int y, int m, int d) {
    try {
      final dt = DateTime(y, m, d);
      return dt.year == y && dt.month == m && dt.day == d;
    } catch (_) {
      return false;
    }
  }

  bool _is18OrOlder(int y, int m, int d) {
    final now = DateTime.now();
    int age = now.year - y;
    if (now.month < m || (now.month == m && now.day < d)) age--;
    return age >= 18;
  }

  Future<void> _submit() async {
    setState(() => _dobError = null);
    final ok = _formKey.currentState?.validate() ?? false;
    if (!ok) return;

    final d = int.tryParse(_dayCtrl.text);
    final m = int.tryParse(_monthCtrl.text);
    final y = int.tryParse(_yearCtrl.text);

    if (d == null || m == null || y == null) {
      setState(() => _dobError = 'Enter your full date of birth');
      return;
    }
    if (!_isValidDate(y, m, d)) {
      setState(() => _dobError = 'Enter a valid date (DD/MM/YYYY)');
      return;
    }
    if (!_is18OrOlder(y, m, d)) {
      setState(() => _dobError = 'You must be 18 or older to sign up');
      return;
    }

    await Future.delayed(const Duration(milliseconds: 400));
    if (!mounted) return;
    ScaffoldMessenger.of(
      context,
    ).showSnackBar(const SnackBar(content: Text('Account created!')));
    Navigator.pushNamedAndRemoveUntil(context, '/home', (_) => false);
  }

  @override
  Widget build(BuildContext context) {
    const fieldWidth = 320.0;
    const boxH = 56.0;

    InputDecoration dobDeco(String hint) =>
        InputDecoration(hintText: hint, counterText: '');

    return Scaffold(
      appBar: AppBar(
        title: const Text('Tourio'),
        backgroundColor: Colors.transparent,
        elevation: 0,
        leading: IconButton(
          icon: const Icon(Icons.arrow_back, color: Colors.white),
          onPressed: () => Navigator.pop(context),
        ),
      ),
      body: SlideshowBackground(
        child: SafeArea(
          child: Center(
            child: SingleChildScrollView(
              padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 16),
              child: Form(
                key: _formKey,
                child: Column(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    const SizedBox(height: 16),
                    const TourioLogo(width: 250),
                    const SizedBox(height: 150),
                    ConstrainedBox(
                      constraints: const BoxConstraints(maxWidth: fieldWidth),
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          TextFormField(
                            controller: _usernameCtrl,
                            decoration: const InputDecoration(
                              labelText: 'Username',
                            ),
                            validator: _validateUsername,
                            textInputAction: TextInputAction.next,
                          ),
                          const SizedBox(height: 12),
                          TextFormField(
                            controller: _emailCtrl,
                            keyboardType: TextInputType.emailAddress,
                            decoration: const InputDecoration(
                              labelText: 'Email',
                            ),
                            validator: _validateEmail,
                            textInputAction: TextInputAction.next,
                          ),
                          const SizedBox(height: 12),
                          ObscuredTextField(
                            controller: _pwCtrl,
                            label: 'Password',
                            validator: _validatePassword,
                          ),
                          const SizedBox(height: 14),
                          Text(
                            'Date of Birth',
                            style: Theme.of(context).textTheme.labelLarge
                                ?.copyWith(color: Colors.white),
                          ),
                          const SizedBox(height: 6),
                          Row(
                            children: [
                              SizedBox(
                                width: 70,
                                height: boxH,
                                child: TextField(
                                  controller: _dayCtrl,
                                  focusNode: _dayNode,
                                  textAlign: TextAlign.center,
                                  keyboardType: TextInputType.number,
                                  inputFormatters: [
                                    FilteringTextInputFormatter.digitsOnly,
                                    LengthLimitingTextInputFormatter(2),
                                  ],
                                  decoration: dobDeco('DD'),
                                  onChanged: (v) {
                                    if (v.length == 2) {
                                      FocusScope.of(
                                        context,
                                      ).requestFocus(_monthNode);
                                    }
                                  },
                                ),
                              ),
                              const SizedBox(width: 10),
                              SizedBox(
                                width: 70,
                                height: boxH,
                                child: TextField(
                                  controller: _monthCtrl,
                                  focusNode: _monthNode,
                                  textAlign: TextAlign.center,
                                  keyboardType: TextInputType.number,
                                  inputFormatters: [
                                    FilteringTextInputFormatter.digitsOnly,
                                    LengthLimitingTextInputFormatter(2),
                                  ],
                                  decoration: dobDeco('MM'),
                                  onChanged: (v) {
                                    if (v.length == 2) {
                                      FocusScope.of(
                                        context,
                                      ).requestFocus(_yearNode);
                                    }
                                  },
                                ),
                              ),
                              const SizedBox(width: 10),
                              SizedBox(
                                width: 110,
                                height: boxH,
                                child: TextField(
                                  controller: _yearCtrl,
                                  focusNode: _yearNode,
                                  textAlign: TextAlign.center,
                                  keyboardType: TextInputType.number,
                                  inputFormatters: [
                                    FilteringTextInputFormatter.digitsOnly,
                                    LengthLimitingTextInputFormatter(4),
                                  ],
                                  decoration: dobDeco('YYYY'),
                                ),
                              ),
                            ],
                          ),
                          if (_dobError != null) ...[
                            const SizedBox(height: 6),
                            Text(
                              _dobError!,
                              style: const TextStyle(
                                color: Color(0xFFFFE082),
                                fontSize: 12.5,
                              ),
                            ),
                          ],
                          const SizedBox(height: 18),
                          FrostButton(
                            onPressed: _submit,
                            label: 'CREATE ACCOUNT',
                          ),
                        ],
                      ),
                    ),
                  ],
                ),
              ),
            ),
          ),
        ),
      ),
    );
  }
}

// Home Page
class HomePage extends StatefulWidget {
  const HomePage({super.key});

  @override
  State<HomePage> createState() => _HomePageState();
}

class _HomePageState extends State<HomePage> {
  int _tab = 0;

  @override
  Widget build(BuildContext context) {
    const navBg = Color(0xFF2A1915);
    const navIdle = Color(0xFFD9CFCB);

    return Scaffold(
      appBar: AppBar(
        title: const Text('Tourio'),
        backgroundColor: Colors.transparent,
        elevation: 0,
      ),
      body: Stack(
        children: [
          SizedBox(
            height: 260,
            width: double.infinity,
            child: Image.asset(
              'assets/images/petra_image.jpg',
              fit: BoxFit.cover,
            ),
          ),
          SafeArea(
            child: Column(
              children: const [SizedBox(height: 16), TourioLogo(width: 230)],
            ),
          ),
          Positioned(
            top: 220,
            left: 0,
            right: 0,
            bottom: 0,
            child: Container(
              decoration: const BoxDecoration(
                color: Colors.white,
                borderRadius: BorderRadius.only(
                  topLeft: Radius.circular(28),
                  topRight: Radius.circular(28),
                ),
              ),
              child: const HomeContent(),
            ),
          ),
        ],
      ),
      bottomNavigationBar: Theme(
        data: Theme.of(context).copyWith(
          splashColor: Colors.transparent,
          highlightColor: Colors.transparent,
        ),
        child: BottomNavigationBar(
          currentIndex: _tab,
          onTap: (index) {
            setState(() => _tab = index);
            switch (index) {
              case 0:
                break;
              case 1:
                Navigator.pushReplacementNamed(context, '/your-trip');
                break;
              case 2:
                Navigator.pushReplacementNamed(context, '/friendventure');
                break;
              case 3:
                Navigator.pushReplacementNamed(context, '/my-profile');
                break;
              case 4:
                Navigator.pushReplacementNamed(context, '/emergency');
                break;
            }
          },
          type: BottomNavigationBarType.fixed,
          backgroundColor: navBg,
          selectedItemColor: Colors.white,
          unselectedItemColor: navIdle,
          items: const [
            BottomNavigationBarItem(icon: Icon(Icons.home), label: 'Home'),
            BottomNavigationBarItem(icon: Icon(Icons.map), label: 'Trip'),
            BottomNavigationBarItem(icon: Icon(Icons.group), label: 'Friends'),
            BottomNavigationBarItem(icon: Icon(Icons.person), label: 'Profile'),
            BottomNavigationBarItem(
              icon: Icon(Icons.emergency),
              label: 'Emergency',
            ),
          ],
        ),
      ),
    );
  }
}

// ===== HomeContent =====
class HomeContent extends StatelessWidget {
  const HomeContent({super.key});

  @override
  Widget build(BuildContext context) {
    final cards = [
      const ActivityCard(
        title: 'Petra Treasury',
        description: 'Walk through the Siq to the iconic Treasury.',
        location: 'Petra',
        image: 'assets/images/petra_image.jpg',
        transport: 'Car',
        duration: '3h',
      ),
      const ActivityCard(
        title: 'Wadi Rum Jeep Tour',
        description: 'Desert safari and sunset views.',
        location: 'Wadi Rum',
        image: 'assets/images/wadi_rum.jpg',
        transport: 'Car',
        duration: '4h',
      ),
      const ActivityCard(
        title: 'Dead Sea Float',
        description: 'Relax and float in the salt-rich waters.',
        location: 'Dead Sea',
        image: 'assets/images/deadsea.jpg',
        transport: 'Bus',
        duration: '2h',
      ),
    ];

    return ListView(
      padding: const EdgeInsets.fromLTRB(16, 16, 16, 24),
      children: [
        const Text(
          'Discover',
          style: TextStyle(fontSize: 20, fontWeight: FontWeight.w800),
        ),
        const SizedBox(height: 12),
        ...cards.map(
          (c) => Padding(
            padding: const EdgeInsets.only(bottom: 16),
            child: SwipeCard(
              title: c.title,
              description: c.description,
              location: c.location,
              image: c.image,
              transport: c.transport,
              duration: c.duration,
            ),
          ),
        ),
        const SizedBox(height: 8),
        FrostButton(
          onPressed: () =>
              Navigator.pushNamed(context, '/activity-recommendations'),
          label: 'SEE RECOMMENDATIONS',
        ),
        const SizedBox(height: 12),
        FrostButton(
          onPressed: () => Navigator.pushNamed(context, '/trip-preferences'),
          label: 'PLAN A TRIP',
        ),
      ],
    );
  }
}

// ===== YourTripPage =====
class YourTripPage extends StatelessWidget {
  const YourTripPage({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Your Trip'),
        backgroundColor: Colors.white,
        foregroundColor: Colors.black87,
      ),
      body: ListView(
        padding: const EdgeInsets.symmetric(vertical: 16),
        children: [
          buildTripDaysSection(),
          const SizedBox(height: 16),
          Padding(
            padding: const EdgeInsets.symmetric(horizontal: 20),
            child: FrostButton(
              onPressed: () =>
                  Navigator.pushNamed(context, '/activity-recommendations'),
              label: 'ADD ACTIVITIES',
            ),
          ),
        ],
      ),
    );
  }
}

// ===== Friendventure & subpages =====
class FriendventureHomePage extends StatelessWidget {
  const FriendventureHomePage({super.key});

  @override
  Widget build(BuildContext context) {
    final group = [
      const GroupMember(name: 'You', isOwner: true),
      const GroupMember(name: 'Sara'),
      const GroupMember(name: 'Omar'),
      const GroupMember(name: 'Lina'),
    ];

    return Scaffold(
      appBar: AppBar(title: const Text('Friendventure')),
      body: ListView(
        padding: const EdgeInsets.all(16),
        children: [
          const Text(
            'Your Group',
            style: TextStyle(fontSize: 20, fontWeight: FontWeight.w800),
          ),
          const SizedBox(height: 8),
          Wrap(
            spacing: 8,
            runSpacing: 8,
            children: group
                .map(
                  (m) => Chip(
                    avatar: CircleAvatar(
                      backgroundColor: m.isOwner
                          ? Colors.green
                          : Colors.grey.shade400,
                      child: Text(m.name.characters.first.toUpperCase()),
                    ),
                    label: Text(m.name + (m.isOwner ? ' (owner)' : '')),
                  ),
                )
                .toList(),
          ),
          const SizedBox(height: 16),
          FrostButton(
            onPressed: () =>
                Navigator.pushNamed(context, '/friendventure/groups'),
            label: 'GROUPS',
          ),
          const SizedBox(height: 8),
          FrostButton(
            onPressed: () =>
                Navigator.pushNamed(context, '/friendventure/polls'),
            label: 'POLLS',
          ),
          const SizedBox(height: 8),
          FrostButton(
            onPressed: () =>
                Navigator.pushNamed(context, '/friendventure/albums'),
            label: 'ALBUMS',
          ),
        ],
      ),
    );
  }
}

class GroupsPage extends StatelessWidget {
  const GroupsPage({super.key});

  @override
  Widget build(BuildContext context) {
    final groups = ['Petra Trip', 'Dead Sea Weekend', 'Wadi Rum Stars'];
    return Scaffold(
      appBar: AppBar(title: const Text('Groups')),
      body: ListView.builder(
        itemCount: groups.length,
        itemBuilder: (_, i) => ListTile(
          leading: const Icon(Icons.group),
          title: Text(groups[i]),
          trailing: const Icon(Icons.chevron_right),
          onTap: () {},
        ),
      ),
      floatingActionButton: FloatingActionButton.extended(
        onPressed: () {},
        icon: const Icon(Icons.add),
        label: const Text('New Group'),
      ),
    );
  }
}

class PollsPage extends StatelessWidget {
  const PollsPage({super.key});

  @override
  Widget build(BuildContext context) {
    final polls = [
      {
        'question': 'Petra or Jerash?',
        'options': ['Petra', 'Jerash'],
      },
      {
        'question': 'Bus or Car?',
        'options': ['Bus', 'Car'],
      },
    ];
    return Scaffold(
      appBar: AppBar(title: const Text('Polls')),
      body: ListView.separated(
        itemCount: polls.length,
        separatorBuilder: (_, __) => const Divider(height: 1),
        itemBuilder: (_, i) => ListTile(
          leading: const Icon(Icons.poll),
          title: Text(polls[i]['question'] as String),
          subtitle: Text((polls[i]['options'] as List<String>).join(' vs ')),
          onTap: () {},
        ),
      ),
      floatingActionButton: FloatingActionButton.extended(
        onPressed: () {},
        icon: const Icon(Icons.add),
        label: const Text('New Poll'),
      ),
    );
  }
}

class AlbumsPage extends StatelessWidget {
  const AlbumsPage({super.key});

  @override
  Widget build(BuildContext context) {
    final albums = ['Group 1', 'Group 2', 'Album 1', 'Album 2'];
    return Scaffold(
      appBar: AppBar(title: const Text('Albums')),
      body: GridView.builder(
        padding: const EdgeInsets.all(12),
        gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
          crossAxisCount: 2,
          childAspectRatio: 1,
          crossAxisSpacing: 12,
          mainAxisSpacing: 12,
        ),
        itemCount: albums.length,
        itemBuilder: (_, i) => Container(
          decoration: BoxDecoration(
            borderRadius: BorderRadius.circular(16),
            image: DecorationImage(
              image: AssetImage(
                i.isEven
                    ? 'assets/images/petra_lights.jpg'
                    : 'assets/images/webdeh_pic.jpg',
              ),
              fit: BoxFit.cover,
            ),
          ),
          child: Container(
            alignment: Alignment.bottomLeft,
            padding: const EdgeInsets.all(12),
            decoration: BoxDecoration(
              color: Colors.black.withOpacity(0.25),
              borderRadius: BorderRadius.circular(16),
            ),
            child: Text(
              albums[i],
              style: const TextStyle(
                color: Colors.white,
                fontWeight: FontWeight.bold,
              ),
            ),
          ),
        ),
      ),
    );
  }
}

// ===== Profile Pages =====
class MyProfilePage extends StatelessWidget {
  const MyProfilePage({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('My Profile')),
      body: ListView(
        padding: const EdgeInsets.all(16),
        children: [
          const CircleAvatar(radius: 40, child: Icon(Icons.person, size: 40)),
          const SizedBox(height: 12),
          const Center(
            child: Text(
              'Ismail',
              style: TextStyle(fontSize: 18, fontWeight: FontWeight.w700),
            ),
          ),
          const SizedBox(height: 20),
          ListTile(
            leading: const Icon(Icons.edit),
            title: const Text('Edit Profile'),
            onTap: () => Navigator.pushNamed(context, '/edit-profile'),
          ),
          ListTile(
            leading: const Icon(Icons.warning_amber),
            title: const Text('Emergency Info'),
            onTap: () => Navigator.pushNamed(context, '/emergency'),
          ),
        ],
      ),
    );
  }
}

class EditProfilePage extends StatefulWidget {
  const EditProfilePage({super.key});

  @override
  State<EditProfilePage> createState() => _EditProfilePageState();
}

class _EditProfilePageState extends State<EditProfilePage> {
  final _nameCtrl = TextEditingController(text: 'Ismail');
  final _bioCtrl = TextEditingController(text: 'Traveler. Foodie. Explorer.');

  @override
  void dispose() {
    _nameCtrl.dispose();
    _bioCtrl.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Edit Profile')),
      body: ListView(
        padding: const EdgeInsets.all(16),
        children: [
          TextField(
            controller: _nameCtrl,
            decoration: const InputDecoration(labelText: 'Name'),
          ),
          const SizedBox(height: 12),
          TextField(
            controller: _bioCtrl,
            decoration: const InputDecoration(labelText: 'Bio'),
            maxLines: 3,
          ),
          const SizedBox(height: 20),
          FrostButton(
            onPressed: () {
              ScaffoldMessenger.of(
                context,
              ).showSnackBar(const SnackBar(content: Text('Profile saved')));
              Navigator.pop(context);
            },
            label: 'SAVE',
          ),
        ],
      ),
    );
  }
}

class EmergencyPage extends StatefulWidget {
  const EmergencyPage({super.key});

  @override
  State<EmergencyPage> createState() => _EmergencyPageState();
}

class _EmergencyPageState extends State<EmergencyPage> {
  // Customize these for your region/team
  static const String primaryEmergencyNumber = '911'; // e.g. 112/999 outside US
  final contacts = const [
    {'name': 'Local Police', 'phone': '911'},
    {'name': 'Tour Guide', 'phone': '+962791234567'},
  ];

  Future<void> _call(String number) async {
    final uri = Uri(scheme: 'tel', path: number);
    final ok = await canLaunchUrl(uri);
    if (ok) {
      await launchUrl(uri);
    } else {
      _toast('Cannot place a call on this device/simulator.');
    }
  }

  Future<void> _sms(String number, String body) async {
    // Works on both iOS & Android; opens the system Messages composer.
    final uri = Uri(
      scheme: 'sms',
      path: number,
      queryParameters: {'body': body},
    );
    final ok = await canLaunchUrl(uri);
    if (ok) {
      await launchUrl(uri);
    } else {
      _toast('Cannot open Messages on this device/simulator.');
    }
  }

  void _toast(String msg) {
    ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text(msg)));
  }

  Future<void> _confirmAndCallSOS() async {
    final confirmed = await showDialog<bool>(
      context: context,
      builder: (_) => AlertDialog(
        title: const Text('Call Emergency Services?'),
        content: Text('This will dial $primaryEmergencyNumber. Continue?'),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context, false),
            child: const Text('Cancel'),
          ),
          FilledButton(
            onPressed: () => Navigator.pop(context, true),
            child: const Text('Call'),
          ),
        ],
      ),
    );
    if (confirmed == true) {
      await _call(primaryEmergencyNumber);
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Emergency')),
      floatingActionButton: FloatingActionButton.extended(
        backgroundColor: const Color(0xFFC03A2B),
        foregroundColor: Colors.white,
        icon: const Icon(Icons.sos),
        label: const Text('SOS'),
        onPressed: _confirmAndCallSOS,
      ),
      body: ListView.separated(
        padding: const EdgeInsets.all(16),
        separatorBuilder: (_, __) => const Divider(),
        itemCount: contacts.length + 1,
        itemBuilder: (_, i) {
          if (i == 0) {
            return Card(
              color: const Color(0xFFFFEBEE),
              child: ListTile(
                leading: const Icon(Icons.sos, color: Colors.red),
                title: Text(
                  'Tap SOS to call $primaryEmergencyNumber immediately',
                  style: const TextStyle(fontWeight: FontWeight.w700),
                ),
                subtitle: const Text(
                  'Hold your device steady and follow operator instructions.',
                ),
              ),
            );
          }
          final c = contacts[i - 1];
          return ListTile(
            leading: const Icon(Icons.contact_phone),
            title: Text(c['name']!),
            subtitle: Text(c['phone']!),
            trailing: Wrap(
              spacing: 8,
              children: [
                IconButton(
                  tooltip: 'Call',
                  icon: const Icon(Icons.phone),
                  onPressed: () => _call(c['phone']!),
                ),
                IconButton(
                  tooltip: 'SMS',
                  icon: const Icon(Icons.sms),
                  onPressed: () => _sms(c['phone']!, 'SOS – I need help.'),
                ),
              ],
            ),
            onTap: () => _call(c['phone']!),
          );
        },
      ),
    );
  }
}

// ===== Trip Setup Pages (placeholders) =====
class TripPreferencesPage extends StatelessWidget {
  const TripPreferencesPage({super.key});
  @override
  Widget build(BuildContext context) {
    return _SimpleScaffold(
      title: 'Trip Preferences',
      child: Column(
        children: [
          _LabeledChipRow(
            label: 'Vibe',
            chips: const ['Nature', 'History', 'Food', 'Adventure'],
          ),
          const SizedBox(height: 16),
          FrostButton(
            onPressed: () => Navigator.pushNamed(context, '/trip-duration'),
            label: 'NEXT',
          ),
        ],
      ),
    );
  }
}

class TripDurationPage extends StatelessWidget {
  const TripDurationPage({super.key});
  @override
  Widget build(BuildContext context) {
    return _SimpleScaffold(
      title: 'Trip Duration',
      child: Column(
        children: [
          _LabeledChipRow(
            label: 'Days',
            chips: const ['1', '2', '3', '5', '7+'],
          ),
          const SizedBox(height: 16),
          FrostButton(
            onPressed: () => Navigator.pushNamed(context, '/accommodation'),
            label: 'NEXT',
          ),
        ],
      ),
    );
  }
}

class AccommodationPage extends StatelessWidget {
  const AccommodationPage({super.key});
  @override
  Widget build(BuildContext context) {
    return _SimpleScaffold(
      title: 'Accommodation',
      child: Column(
        children: [
          _LabeledChipRow(
            label: 'Type',
            chips: const ['Hotel', 'Hostel', 'BnB', 'Resort'],
          ),
          const SizedBox(height: 16),
          FrostButton(
            onPressed: () => Navigator.pushNamed(context, '/travel-mode'),
            label: 'NEXT',
          ),
        ],
      ),
    );
  }
}

class TravelModePage extends StatelessWidget {
  const TravelModePage({super.key});
  @override
  Widget build(BuildContext context) {
    return _SimpleScaffold(
      title: 'Travel Mode',
      child: Column(
        children: [
          _LabeledChipRow(label: 'Mode', chips: const ['Car', 'Bus', 'Walk']),
          const SizedBox(height: 16),
          FrostButton(
            onPressed: () =>
                Navigator.pushNamed(context, '/activities-per-day'),
            label: 'NEXT',
          ),
        ],
      ),
    );
  }
}

class ActivitiesPerDayPage extends StatelessWidget {
  const ActivitiesPerDayPage({super.key});
  @override
  Widget build(BuildContext context) {
    return _SimpleScaffold(
      title: 'Activities/Day',
      child: Column(
        children: [
          _LabeledChipRow(label: 'Count', chips: const ['1', '2', '3', '4+']),
          const SizedBox(height: 16),
          FrostButton(
            onPressed: () => Navigator.pushNamed(context, '/budget'),
            label: 'NEXT',
          ),
        ],
      ),
    );
  }
}

class BudgetPage extends StatelessWidget {
  const BudgetPage({super.key});
  @override
  Widget build(BuildContext context) {
    return _SimpleScaffold(
      title: 'Budget',
      child: Column(
        children: [
          _LabeledChipRow(
            label: 'Per day',
            chips: const ['Low', 'Medium', 'High'],
          ),
          const SizedBox(height: 16),
          FrostButton(
            onPressed: () =>
                Navigator.pushNamed(context, '/activity-recommendations'),
            label: 'SEE RECS',
          ),
        ],
      ),
    );
  }
}

class ActivityRecommendationsPage extends StatelessWidget {
  const ActivityRecommendationsPage({super.key});

  @override
  Widget build(BuildContext context) {
    final recs = [
      const ActivityCard(
        title: 'Jerash Roman Ruins',
        description: 'Ancient city with colonnaded streets.',
        location: 'Jerash',
        image: 'assets/images/nature_pic.jpg',
        transport: 'Bus',
        duration: '3h',
      ),
      const ActivityCard(
        title: 'Rainbow Street Walk',
        description: 'Cafés, views, and souvenirs.',
        location: 'Jabal Amman',
        image: 'assets/images/stairtojabalamman.jpg',
        transport: 'Walk',
        duration: '2h',
      ),
    ];

    return Scaffold(
      appBar: AppBar(title: const Text('Recommendations')),
      body: ListView(
        padding: const EdgeInsets.all(16),
        children: recs
            .map(
              (c) => Padding(
                padding: const EdgeInsets.only(bottom: 16),
                child: SwipeCard(
                  title: c.title,
                  description: c.description,
                  location: c.location,
                  image: c.image,
                  transport: c.transport,
                  duration: c.duration,
                ),
              ),
            )
            .toList(),
      ),
      floatingActionButton: FloatingActionButton.extended(
        onPressed: () => Navigator.pushNamed(context, '/your-trip'),
        icon: const Icon(Icons.check),
        label: const Text('ADD TO TRIP'),
      ),
    );
  }
}

// ===== Small helpers for setup pages =====
class _SimpleScaffold extends StatelessWidget {
  const _SimpleScaffold({required this.title, required this.child});
  final String title;
  final Widget child;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text(title)),
      body: ListView(padding: const EdgeInsets.all(16), children: [child]),
    );
  }
}

class _LabeledChipRow extends StatefulWidget {
  const _LabeledChipRow({required this.label, required this.chips});
  final String label;
  final List<String> chips;

  @override
  State<_LabeledChipRow> createState() => _LabeledChipRowState();
}

class _LabeledChipRowState extends State<_LabeledChipRow> {
  String? selected;

  @override
  Widget build(BuildContext context) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          widget.label,
          style: const TextStyle(fontSize: 16, fontWeight: FontWeight.w700),
        ),
        const SizedBox(height: 8),
        Wrap(
          spacing: 8,
          children: widget.chips.map((c) {
            final isSel = c == selected;
            return ChoiceChip(
              label: Text(c),
              selected: isSel,
              onSelected: (_) => setState(() => selected = c),
            );
          }).toList(),
        ),
      ],
    );
  }
}
