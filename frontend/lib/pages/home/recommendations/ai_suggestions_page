import 'package:flutter/material.dart';

class Suggestion {
  final String title;
  final String location;
  final String startTime;
  final String duration;
  final String cost;
  final List<String> tags;

  Suggestion({
    required this.title,
    required this.location,
    required this.startTime,
    required this.duration,
    required this.cost,
    this.tags = const [],
  });
}

class AiSuggestionsPage extends StatefulWidget {
  const AiSuggestionsPage({super.key});

  @override
  State<AiSuggestionsPage> createState() => _AiSuggestionsPageState();
}

class _AiSuggestionsPageState extends State<AiSuggestionsPage> {
  static const cream   = Color(0xFFF3E8DE);
  static const maroon  = Color(0xFF5C1E16);
  static const primary = Color(0xFFC03A2B);
  static const chipBg  = Color(0xFF2B0D0D);

  int _selectedDay = 0;
  late final int _numDays;
  late final Map<int, List<Suggestion>> _plan;

  @override
  void initState() {
    super.initState();
  }

  @override
  void didChangeDependencies() {
    super.didChangeDependencies();

    final Map args = (ModalRoute.of(context)?.settings.arguments as Map?) ?? {};

    _numDays = (args['numDays'] is int && args['numDays'] > 0)
        ? args['numDays']
        : 3;

    final incoming = args['suggestions'];
    if (incoming is List && incoming.isNotEmpty && incoming.first is List) {
      _plan = {
        for (int i = 0; i < incoming.length; i++)
          i: List<Suggestion>.from(incoming[i])
      };
    } else {
      _plan = {
        for (int d = 0; d < _numDays; d++)
          d: [
            Suggestion(
              title: 'Historic Citadel Visit',
              location: 'Amman Citadel',
              startTime: '9:00 AM',
              duration: '2h',
              cost: '3 JD',
              tags: const ['culture', 'history'],
            ),
            Suggestion(
              title: 'Downtown Food Walk',
              location: 'Al-Balad',
              startTime: '12:00 PM',
              duration: '1.5h',
              cost: '15 JD',
              tags: const ['food', 'local life'],
            ),
            Suggestion(
              title: 'Sunset Viewpoint',
              location: 'Jabal Al Weibdeh',
              startTime: '6:30 PM',
              duration: '1h',
              cost: 'Free',
              tags: const ['view', 'relax'],
            ),
          ]
      };
    }
  }

  void _goNext() {
    Navigator.pushNamed(
      context,
      '/your-trip',
      arguments: {
        'plan': _plan,
        'numDays': _numDays,
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: cream,
      body: SafeArea(
        child: Column(
          children: [
            const SizedBox(height: 16),
            const Padding(
              padding: EdgeInsets.symmetric(horizontal: 20),
              child: Text(
                'Help us plan your perfect trip — just a few quick questions!',
                textAlign: TextAlign.center,
                style: TextStyle(fontSize: 16, color: maroon),
              ),
            ),
            const SizedBox(height: 20),
            SingleChildScrollView(
              scrollDirection: Axis.horizontal,
              padding: const EdgeInsets.symmetric(horizontal: 16),
              child: Row(
                children: List.generate(_numDays, (i) {
                  final selected = _selectedDay == i;
                  return Padding(
                    padding: const EdgeInsets.only(right: 8),
                    child: ChoiceChip(
                      label: Text('Day ${i + 1}'),
                      selected: selected,
                      onSelected: (_) => setState(() => _selectedDay = i),
                      selectedColor: primary,
                      labelStyle: TextStyle(
                        color: selected ? Colors.white : Colors.white,
                        fontWeight: FontWeight.w700,
                      ),
                      backgroundColor: chipBg,
                      side: BorderSide(
                        color: selected ? Colors.transparent : const Color(0xFF61201B),
                        width: 1.2,
                      ),
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(12),
                      ),
                    ),
                  );
                }),
              ),
            ),
            const SizedBox(height: 12),
            const Padding(
              padding: EdgeInsets.symmetric(horizontal: 20),
              child: Align(
                alignment: Alignment.centerLeft,
                child: Text(
                  'Suggested plan for the day',
                  style: TextStyle(
                    color: maroon,
                    fontSize: 18,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ),
            ),
            const SizedBox(height: 8),
            Expanded(
              child: ListView.separated(
                padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
                itemCount: _plan[_selectedDay]?.length ?? 0,
                separatorBuilder: (_, __) => const SizedBox(height: 10),
                itemBuilder: (context, index) {
                  final s = _plan[_selectedDay]![index];
                  return _SuggestionCard(
                    suggestion: s,
                    onReplace: () {
                      setState(() {
                        _plan[_selectedDay]![index] = Suggestion(
                          title: 'Alt: Street Art Walk',
                          location: 'Rainbow St.',
                          startTime: s.startTime,
                          duration: '1h',
                          cost: 'Free',
                          tags: const ['art', 'walk'],
                        );
                      });
                    },
                    onRemove: () {
                      setState(() {
                        _plan[_selectedDay]!.removeAt(index);
                      });
                    },
                  );
                },
              ),
            ),
            Padding(
              padding: const EdgeInsets.fromLTRB(16, 4, 16, 16),
              child: Row(
                children: [
                  Expanded(
                    child: OutlinedButton.icon(
                      onPressed: () => Navigator.pop(context),
                      icon: const Icon(Icons.arrow_back),
                      label: const Text('BACK'),
                      style: OutlinedButton.styleFrom(
                        foregroundColor: primary,
                        side: const BorderSide(color: primary, width: 2),
                        padding: const EdgeInsets.symmetric(vertical: 14),
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(12),
                        ),
                        textStyle: const TextStyle(
                          fontWeight: FontWeight.w700,
                          fontSize: 16,
                        ),
                      ),
                    ),
                  ),
                  const SizedBox(width: 12),
                  Expanded(
                    child: ElevatedButton.icon(
                      onPressed: _goNext,
                      icon: const Icon(Icons.check),
                      label: const Text('SAVE & CONTINUE'),
                      style: ElevatedButton.styleFrom(
                        backgroundColor: primary,
                        foregroundColor: Colors.white,
                        padding: const EdgeInsets.symmetric(vertical: 14),
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(12),
                        ),
                        textStyle: const TextStyle(
                          fontWeight: FontWeight.w700,
                          fontSize: 16,
                        ),
                      ),
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }
}

class _SuggestionCard extends StatelessWidget {
  const _SuggestionCard({
    required this.suggestion,
    required this.onReplace,
    required this.onRemove,
  });

  final Suggestion suggestion;
  final VoidCallback onReplace;
  final VoidCallback onRemove;

  static const maroon  = Color(0xFF5C1E16);
  static const chipBg  = Color(0xFF2B0D0D);
  static const primary = Color(0xFFC03A2B);

  @override
  Widget build(BuildContext context) {
    return Card(
      elevation: 2,
      margin: EdgeInsets.zero,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
      child: Padding(
        padding: const EdgeInsets.fromLTRB(14, 14, 14, 10),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                const Icon(Icons.schedule, size: 18, color: primary),
                const SizedBox(width: 8),
                Expanded(
                  child: Text(
                    '${suggestion.startTime}  •  ${suggestion.title}',
                    style: const TextStyle(
                      fontWeight: FontWeight.w700,
                      color: maroon,
                      fontSize: 16,
                    ),
                  ),
                ),
              ],
            ),
            const SizedBox(height: 6),
            Wrap(
              spacing: 12,
              runSpacing: 6,
              crossAxisAlignment: WrapCrossAlignment.center,
              children: [
                _Meta(icon: Icons.place_outlined, text: suggestion.location),
                _Meta(icon: Icons.timer_outlined,  text: suggestion.duration),
                _Meta(icon: Icons.payments_outlined, text: suggestion.cost),
              ],
            ),
            const SizedBox(height: 8),
            if (suggestion.tags.isNotEmpty)
              Wrap(
                spacing: 8,
                runSpacing: 8,
                children: suggestion.tags.map((t) {
                  return Container(
                    padding: const EdgeInsets.symmetric(horizontal: 10, vertical: 6),
                    decoration: BoxDecoration(
                      color: chipBg,
                      borderRadius: BorderRadius.circular(10),
                    ),
                    child: Text(
                      t,
                      style: const TextStyle(color: Colors.white, fontSize: 12),
                    ),
                  );
                }).toList(),
              ),
            const SizedBox(height: 10),
            Row(
              children: [
                TextButton.icon(
                  onPressed: onReplace,
                  icon: const Icon(Icons.swap_horiz, color: primary),
                  label: const Text('Replace', style: TextStyle(color: primary)),
                ),
                const SizedBox(width: 4),
                TextButton.icon(
                  onPressed: onRemove,
                  icon: const Icon(Icons.delete_outline, color: primary),
                  label: const Text('Remove', style: TextStyle(color: primary)),
                ),
                const Spacer(),
                IconButton(
                  tooltip: 'Details',
                  onPressed: () {},
                  icon: const Icon(Icons.info_outline, color: primary),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }
}

class _Meta extends StatelessWidget {
  const _Meta({required this.icon, required this.text});
  final IconData icon;
  final String text;

  @override
  Widget build(BuildContext context) {
    return Row(
      mainAxisSize: MainAxisSize.min,
      children: [
        Icon(icon, size: 16, color: const Color(0xFFC03A2B)),
        const SizedBox(width: 6),
        Text(
          text,
          style: const TextStyle(fontSize: 13, color: Colors.black87),
        ),
      ],
    );
  }
}

